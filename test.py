import logging
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, CallbackQueryHandler
)
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("TOKEN")
SUPER_ADMIN_ID = int(os.getenv("SUPER_ADMIN_ID"))

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
user_sessions = {}  # user_id: {name, phone, verified}
admin_reply_targets = {}
location_requests = {}  # user_id: admin_id

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id == SUPER_ADMIN_ID:
        await update.message.reply_text("üëë –í—ã —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω. –ñ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        if user_id not in user_sessions or not user_sessions[user_id].get("verified"):
            button = KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —è –Ω–µ –±–æ—Ç", request_contact=True)
            markup = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                reply_markup=markup
            )
        else:
            await update.message.reply_text("üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user_id = update.message.from_user.id
    user_name = f"{contact.first_name or ''} {contact.last_name or ''}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    phone = contact.phone_number

    user_sessions[user_id] = {
        "name": user_name,
        "phone": phone,
        "verified": True
    }

    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=ReplyKeyboardRemove()
    )

# === –ü—Ä–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id

    if user_id not in user_sessions or not user_sessions[user_id].get("verified"):
        await update.message.reply_text("‚ùó–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç, –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return

    msg = update.message.text
    user_info = user_sessions[user_id]
    user_name = user_info["name"]
    phone = user_info["phone"]

    user_tag = f'{user_name} | üì± {phone}'

    user_sessions[user_id]["last_message"] = msg

    keyboard = [
        [InlineKeyboardButton(f"‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å {user_name}", callback_data=f"reply_{user_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=SUPER_ADMIN_ID,
        text=(
            f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
            f"üë§ –ò–º—è: {user_name}\n"
            f"üÜî ID: {user_id}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            f"üí¨ {msg}"
        ),
        reply_markup=reply_markup
    )

    await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" –æ—Ç –∞–¥–º–∏–Ω–∞ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("reply_"):
        target_user_id = int(query.data.split("_")[1])
        admin_reply_targets[SUPER_ADMIN_ID] = target_user_id

        user_info = user_sessions.get(target_user_id, {})
        user_name = user_info.get("nametel", f"User#{target_user_id}")

        await query.message.reply_text(
            f"‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_name}, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ."
        )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞ ===
async def handle_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat_id != SUPER_ADMIN_ID:
        return

    target_user_id = admin_reply_targets.get(SUPER_ADMIN_ID)
    if not target_user_id:
        await update.message.reply_text("‚ùó–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏, –∫–æ–º—É –æ—Ç–≤–µ—á–∞—Ç—å. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–≤–µ—Ç–∏—Ç—å'.")
        return

    msg = update.message.text
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"üëë –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{msg}"
        )
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ /get <user_id> ‚Äî –ó–∞–ø—Ä–æ—Å –ª–æ–∫–∞—Ü–∏–∏ ===
async def request_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat_id != SUPER_ADMIN_ID:
        return

    if not context.args:
        await update.message.reply_text("‚ùó–ò—Å–ø–æ–ª—å–∑—É–π: /get <user_id>")
        return

    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùó–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    if target_user_id not in user_sessions:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    location_requests[target_user_id] = SUPER_ADMIN_ID

    button = KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
    markup = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)

    await context.bot.send_message(
        chat_id=target_user_id,
        text="üìç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.",
        reply_markup=markup
    )

    await update.message.reply_text("üì® –ó–∞–ø—Ä–æ—Å –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id not in location_requests:
        await update.message.reply_text("‚ÑπÔ∏è –õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞.")
        return

    admin_id = location_requests.pop(user_id)
    location = update.message.location

    await context.bot.send_message(
        chat_id=admin_id,
        text=f"üìç –õ–æ–∫–∞—Ü–∏—è –æ—Ç {user_sessions[user_id]['name']}:\n"
             f"üåê –®–∏—Ä–æ—Ç–∞: {location.latitude}\nüåê –î–æ–ª–≥–æ—Ç–∞: {location.longitude}"
    )

    await context.bot.send_location(
        chat_id=admin_id,
        latitude=location.latitude,
        longitude=location.longitude
    )

    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –õ–æ–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=ReplyKeyboardRemove())

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("get", request_location))
    app.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    app.add_handler(MessageHandler(filters.LOCATION, location_handler))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.Chat(SUPER_ADMIN_ID),
        handle_user_message,
        block=False
    ))
    app.add_handler(MessageHandler(
        filters.TEXT & filters.Chat(SUPER_ADMIN_ID),
        handle_admin_reply,
        block=False
    ))

    app.run_polling()

if __name__ == '__main__':
    main()
